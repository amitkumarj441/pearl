// Code generated by etc/enum/makeenum.py. DO NOT EDIT

package pearl

import "fmt"

// CircuitErrorCode is an error code classifying a problem with a circuit.
type CircuitErrorCode byte

// All possible CircuitErrorCode values.
//
// Reference: https://github.com/torproject/torspec/blob/8aaa36d1a062b20ca263b6ac613b77a3ba1eb113/tor-spec.txt#L1337-L1352
//
//	   The error codes are:
//	     0 -- NONE            (No reason given.)
//	     1 -- PROTOCOL        (Tor protocol violation.)
//	     2 -- INTERNAL        (Internal error.)
//	     3 -- REQUESTED       (A client sent a TRUNCATE command.)
//	     4 -- HIBERNATING     (Not currently operating; trying to save bandwidth.)
//	     5 -- RESOURCELIMIT   (Out of memory, sockets, or circuit IDs.)
//	     6 -- CONNECTFAILED   (Unable to reach relay.)
//	     7 -- OR_IDENTITY     (Connected to relay, but its OR identity was not
//	                           as expected.)
//	     8 -- OR_CONN_CLOSED  (The OR connection that was carrying this circuit
//	                           died.)
//	     9 -- FINISHED        (The circuit has expired for being dirty or old.)
//	    10 -- TIMEOUT         (Circuit construction took too long)
//	    11 -- DESTROYED       (The circuit was destroyed w/o client TRUNCATE)
//	    12 -- NOSUCHSERVICE   (Request for unknown hidden service)
//
const (
	CircuitErrorNone          CircuitErrorCode = 0
	CircuitErrorProtocol      CircuitErrorCode = 1
	CircuitErrorInternal      CircuitErrorCode = 2
	CircuitErrorRequested     CircuitErrorCode = 3
	CircuitErrorHibernating   CircuitErrorCode = 4
	CircuitErrorResourcelimit CircuitErrorCode = 5
	CircuitErrorConnectfailed CircuitErrorCode = 6
	CircuitErrorOrIdentity    CircuitErrorCode = 7
	CircuitErrorOrConnClosed  CircuitErrorCode = 8
	CircuitErrorFinished      CircuitErrorCode = 9
	CircuitErrorTimeout       CircuitErrorCode = 10
	CircuitErrorDestroyed     CircuitErrorCode = 11
	CircuitErrorNosuchservice CircuitErrorCode = 12
)

var stringsCircuitErrorCode = map[CircuitErrorCode]string{
	0:  "NONE",
	1:  "PROTOCOL",
	2:  "INTERNAL",
	3:  "REQUESTED",
	4:  "HIBERNATING",
	5:  "RESOURCELIMIT",
	6:  "CONNECTFAILED",
	7:  "OR_IDENTITY",
	8:  "OR_CONN_CLOSED",
	9:  "FINISHED",
	10: "TIMEOUT",
	11: "DESTROYED",
	12: "NOSUCHSERVICE",
}

func (c CircuitErrorCode) String() string {
	s, ok := stringsCircuitErrorCode[c]
	if ok {
		return s
	}
	return fmt.Sprintf("CircuitErrorCode(%d)", byte(c))
}

// IsCircuitErrorCode determines whether c is a possible CircuitErrorCode value.
func IsCircuitErrorCode(c byte) bool {
	_, ok := stringsCircuitErrorCode[CircuitErrorCode(c)]
	return ok
}
