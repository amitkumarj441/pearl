// Code generated by etc/enum/makeenum.py. DO NOT EDIT

package pearl

import "fmt"

// LinkSpecifier describes how to connect to the next node in a circuit.
type LinkSpecifier byte

// All possible LinkSpecifier values.
//
// Reference: https://github.com/torproject/torspec/blob/8aaa36d1a062b20ca263b6ac613b77a3ba1eb113/tor-spec.txt#L954-L964
//
//	   Link specifiers describe the next node in the circuit and how to
//	   connect to it. Recognized specifiers are:
//	      [00] TLS-over-TCP, IPv4 address
//	           A four-byte IPv4 address plus two-byte ORPort
//	      [01] TLS-over-TCP, IPv6 address
//	           A sixteen-byte IPv6 address plus two-byte ORPort
//	      [02] Legacy identity
//	           A 20-byte SHA1 identity fingerprint. At most one may be listed.
//	      [03] Ed25519 identity
//	           A 32-byte Ed25519 identity fingerprint. At most one may
//	           be listed.
//
const (
	LinkSpecifierTLSTCPIPv4      LinkSpecifier = 0
	LinkSpecifierTLSTCPIPv6      LinkSpecifier = 1
	LinkSpecifierLegacyIdentity  LinkSpecifier = 2
	LinkSpecifierEd25519Identity LinkSpecifier = 3
)

var stringsLinkSpecifier = map[LinkSpecifier]string{
	0: "TLS_TCP_IPv4",
	1: "TLS_TCP_IPv6",
	2: "LEGACY_IDENTITY",
	3: "ED25519_IDENTITY",
}

func (l LinkSpecifier) String() string {
	s, ok := stringsLinkSpecifier[l]
	if ok {
		return s
	}
	return fmt.Sprintf("LinkSpecifier(%d)", byte(l))
}

// IsLinkSpecifier determines whether l is a possible LinkSpecifier value.
func IsLinkSpecifier(l byte) bool {
	_, ok := stringsLinkSpecifier[LinkSpecifier(l)]
	return ok
}
