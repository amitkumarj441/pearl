import yaml
import sys
import stringcase


def read_spec(filename):
    with open(filename) as f:
        return yaml.load(f)


SPECIAL = [ 'TLS', 'TCP', 'IPv4', 'IPv6' ]

def label_to_const_name(label):
    s = stringcase.pascalcase(label.lower())
    for spec in SPECIAL:
        s = s.replace(spec.lower().title(), spec)
    return s


def output_foreach_code(spec, tmpl):
    for value, label in spec['codes'].items():
        print tmpl.format(
            label=label,
            label_const_name=label_to_const_name(label),
            value=value,
            **spec
        )


def output(spec):
    spec['string_map_var'] = 'strings' + spec['name']
    spec['receiver'] = spec['name'][0].lower()
    spec.setdefault('prefix', '')

    lines = [
        '// Code generated by etc/enum/makeenum.py. DO NOT EDIT',
        '',
        'package {pkg}',
        '',
        '// {doc}',
        'type {name} {type}',
        '',
        '// All possible {name} values.',
        '//',
    ]
    for line in lines:
        print line.format(**spec)

    refs = spec.get('refs', [spec.get('ref')])
    for ref in refs:
        print '// Insert: {ref}'.format(ref=ref)

    print 'const ('
    output_foreach_code(spec, '\t{prefix}{label_const_name} {name} = {value}')
    print ')'
    print

    print 'var {string_map_var} = map[{name}]string{{'.format(**spec)
    output_foreach_code(spec, '\t{value}: "{label}",')
    print '}'

    spec['str_var'] = 's' if spec['receiver'] != 's' else 'str'
    print '''
    func ({receiver} {name}) String() string {{
        {str_var}, ok := {string_map_var}[{receiver}]
        if ok {{
            return {str_var}
        }}
        return fmt.Sprintf("{name}(%d)", {type}({receiver}))
    }}
    '''.format(**spec)

    print '''
    // Is{name} determines whether {receiver} is a possible {name} value.
    func Is{name}({receiver} {type}) bool {{
        _, ok := {string_map_var}[{name}({receiver})]
        return ok
    }}
    '''.format(**spec)



#var commandStrings = map[Command]string{
#	0:   "PADDING",
#	1:   "CREATE",
#	2:   "CREATED",
#	3:   "RELAY",
#	4:   "DESTROY",
#	5:   "CREATE_FAST",
#	6:   "CREATED_FAST",
#	8:   "NETINFO",
#	9:   "RELAY_EARLY",
#	10:  "CREATE2",
#	11:  "CREATED2",
#	7:   "VERSIONS",
#	128: "VPADDING",
#	129: "CERTS",
#	130: "AUTH_CHALLENGE",
#	131: "AUTHENTICATE",
#	132: "AUTHORIZE",
#}
#
#func (c Command) String() string {
#	s, ok := commandStrings[c]
#	if ok {
#		return s
#	}
#	return fmt.Sprintf("Command(%d)", byte(c))
#}
#
#// IsCommand determines whether the given byte is a recognized cell command.
#func IsCommand(c byte) bool {
#	_, ok := commandStrings[Command(c)]
#	return ok
#}


def main(args):
    spec = read_spec(args[0])
    output(spec)


if __name__ == '__main__':
    main(sys.argv[1:])
